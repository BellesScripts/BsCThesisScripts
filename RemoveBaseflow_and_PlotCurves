import matplotlib.pyplot as plt
import pandas as pd
from Qhfunctie import Get_Function
import numpy as np
from scipy.integrate import trapz
from mpl_toolkits import mplot3d
#import plotly.graph_objects as go
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
from FillBetween import fill_between_3d

def GetStageJuly(name):
    hjuly = pd.read_csv('~/PythonBscThesis/H_july/%s_july.csv' % name, sep=';',
                        usecols=['12', '13', '14', '15', '16', '17', '18','19','20','21','22','23','24','25','26','27','28','29','30','31'], nrows=24)
    #haug = pd.read_csv('~/PythonBscThesis/H_aug/%s_aug.csv' % name, sep=';')
    h = list(hjuly['12']) + list(hjuly['13']) + list(hjuly['14']) + list(hjuly['15']) + list(hjuly['16']) + list(
        hjuly['17']) + list(hjuly['18']) + list(hjuly['19']) \
        + list(hjuly['20']) + list(hjuly['21']) + list(hjuly['22']) + list(hjuly['23']) + list(hjuly['24']) + list(
        hjuly['25']) + list(hjuly['26']) + list(hjuly['27']) + list(hjuly['28']) + list(hjuly['29']) + list(hjuly['30'])+ list(hjuly['31']) \
        #+ list(haug['1']) + list(haug['2']) + list(haug['3']) + list(haug['4']) + list(haug['5']) + list(
        #haug['6']) + list(haug['7']) + list(haug['8']) + list(haug['9']) + list(haug['10']) \
        #+ list(haug['11']) + list(haug['12']) + list(haug['13']) + list(haug['14']) + list(haug['15']) + list(
        #haug['16']) #+list(haug['17'])#+list(haug['18'])+list(haug['19'])
    return h

def GetDischargeJuly(name):
    qjuly = pd.read_csv('~/PythonBscThesis/Q_july/%s_july_q.csv' % name, sep=';',
                        usecols=['12', '13', '14', '15', '16', '17', '18','19','20','21','22','23','24','25','26','27','28','29','30','31'], nrows=24)
    #qaug=pd.read_csv('~/PythonBscThesis/Q_aug/%s_aug_q.csv' % name, sep=';')
    q=list(qjuly['12'])+list(qjuly['13'])+list(qjuly['14'])+list(qjuly['15'])+list(qjuly['16'])+list(qjuly['17'])+list(qjuly['18'])+list(qjuly['19'])\
      +list(qjuly['20'])+list(qjuly['21'])+list(qjuly['22'])+list(qjuly['23'])+list(qjuly['24'])+list(qjuly['25'])+list(qjuly['26'])+list(qjuly['27'])+list(qjuly['28'])+list(qjuly['29'])+list(qjuly['30'])+list(qjuly['31'])\
    #+list(qaug['1'])+list(qaug['2'])+list(qaug['3'])+list(qaug['4'])+list(qaug['5'])+list(qaug['6'])+list(qaug['7'])+list(qaug['8'])+list(qaug['9'])+list(qaug['10']) \
      #+ list(qaug['11'])+list(qaug['12'])+list(qaug['13'])+list(qaug['14'])+list(qaug['15'])+list(qaug['16'])#+list(qaug['17'])+list(qaug['18'])+list(qaug['19'])
    return q

def GetRainJuly(name):
    if name== "Lasnenville":
        station='SanktVith'
    elif name=='TroisPonts':
        station='Vielsalm'
    elif name=='Stavelot' or name=='Chevron' or name=='Targnon' or name=='Remouchamps' or name=='Martinrive':
        station='Coosup'
    else:
        station='Robertville'
    rainjuly = pd.read_csv('~/PythonBscThesis/RainfallJuly/%s_july.csv' % station, sep=';')
    rain= list(rainjuly['13']) + list(rainjuly['14']) + list(rainjuly['15'])+\
            list(rainjuly['16']) +list(rainjuly['17']) +list(rainjuly['18'])+list(rainjuly['19'])+list(rainjuly['20'])+list(rainjuly['21']) \
          + list(rainjuly['22'])+list(rainjuly['23'])+list(rainjuly['24'])+list(rainjuly['25'])+list(rainjuly['26'])+list(rainjuly['27']) \
          + list(rainjuly['28'])+list(rainjuly['29'])+list(rainjuly['30'])+list(rainjuly['30'])
    return rain

def Remove_baseflow(name, variable, sort):
    if variable == 'q' and sort=='old':
        peakdata= GetDischargeJuly(name)
    elif variable == 'h' and sort=='old':
        peakdata = GetStageJuly(name)
    elif variable == 'q' and sort=='new':
        h = GetStageJuly(name)
        a, b, c, d = Get_Function(name)
        peakdata = []
        for i in range(len(h)):
            qex = a * h[i] ** 3 + b * h[i] ** 2 + c * h[i] + d
            peakdata.append(qex)
    elif variable== 'h' and sort=='new':
        peakdata = GetStageJuly(name)
    else:
        print('Wrong variable')
    base=min(peakdata)
    print('The baseflow of %s is:' %name, base)
    peak=[]
    for i in range(len(peakdata)):
        newvalue=peakdata[i]-base
        peak.append(newvalue)
    rain=GetRainJuly(name)
    x=range(0,len(rain))
    #plt.bar(x,rain, label='Rainfall in mm')
    #plt.plot(peakdata, label='old')
    #plt.plot(peak, label='Minus baseflow')
    #plt.legend()
    #plt.show()
    timehours = list(range(len(peakdata)))
    xdata=np.array(timehours)
    ydatanew=np.array(peak)
    ydataold=np.array(peakdata)
    areanew = trapz(y=ydatanew, x=xdata) * 3600
    areaold = trapz(y=ydataold, x=xdata) * 3600
    print('The old calculated area is:', areaold)
    print('The calculated area without baseflow is:', areanew)
    return peak




def ShowMoreStagePeaks(names):
    for i in names:
        name=i
        #if variable=='q' and case=='new' and name=='Martinrive' or name=='Remouchamps' or name=='Targnon' or name=='TroisPonts' or name=='Beverce' or name=='Stavelot':
            #peak=Remove_baseflow(name, 'q', 'new')
        #elif variable=='q' and case=='old':
            #peak = Remove_baseflow(name, 'q', 'old')
        #else:
        peak=Remove_baseflow(name, 'h', 'old')
        timehours = list(range(len(peak)))
        plt.plot(timehours,peak, label='%s'%name)
    plt.grid()
    plt.legend()
    plt.show()

#ShowMoreStagePeaks(['Lasnenville','Stavelot','Targnon','Martinrive'])
#ShowMoreStagePeaks(['Bullingen','Wirtzfeld','Beverce'])
#ShowMoreStagePeaks(['Bullingen','Wirtzfeld','Beverce','Malmedy']) #Warche
#ShowMoreStagePeaks(['Malmedyenne','Malmedy']) #warchenne
#ShowMoreStagePeaks(['TroisPonts','Lasnenville','Stavelot']) #Salm

def ShowMoreQPeaks(names):
    for i in names:
        name=i
        #if variable=='q' and case=='new' and name=='Martinrive' or name=='Remouchamps' or name=='Targnon' or name=='TroisPonts' or name=='Beverce' or name=='Stavelot':
            #peak=Remove_baseflow(name, 'q', 'new')
        #elif variable=='q' and case=='old':
            #peak = Remove_baseflow(name, 'q', 'old')
        #else:
        peak=Remove_baseflow(name, 'q', 'old')
        timehours = list(range(len(peak)))
        plt.plot(timehours,peak, label='%s'%name)
    plt.grid()
    plt.legend()
    #plt.show()

ShowMoreQPeaks(['Stavelot','Targnon','Martinrive'])
#ShowMoreStagePeaks(['Bullingen','Wirtzfeld','Beverce'])
#ShowMoreStagePeaks(['Bullingen','Wirtzfeld','Beverce','Malmedy']) #Warche
#ShowMoreQPeaks(['Beverce','Malmedyenne','Malmedy']) #warchenne
#ShowMoreStagePeaks(['TroisPonts','Lasnenville','Stavelot']) #Salm

'''h=Remove_baseflow(name, 'h', 'old')
timehours = list(range(len(h)))
plt.plot(timehours,h, label='%s' %name)
peak1=Remove_baseflow('Targnon','q', 'old')
peak2=Remove_baseflow('Stavelot','q', 'old')
peak3=Remove_baseflow('Stavelot','q', 'new')
timehours = list(range(len(peak1)))
plt.plot(timehours,peak1, label='Targnon')
plt.plot(timehours,peak2, label='Stavelot')
plt.plot(timehours,peak3, label='Stavelot new')
plt.legend()
plt.show()'''

def PlotEvolvementh3d(names):
    fig=plt.figure(figsize=(12,8))
    ax = fig.add_subplot(111, projection='3d', xlim=(0, 456), ylim=(0, 10))
    #ax = plt.axes(projection='3d')
    nummer=0
    zord=20
    for i in range(len(names)):
        name= names[i]
        z=i
        zstr=str(z)
        zlist=[]
        zord=zord-5
        nummer=nummer+1
        peak=Remove_baseflow(name, 'h', 'old')
        peaknp=np.array(peak)
        for i in range(len(peak)):
            zlist.append(z)
        znp=np.array(zlist)
        timehours = list(range(len(peak)))
        timehoursnp=np.array(timehours)
        #plt.plot(timehoursnp, znp, peaknp, label='%s' % name)
        set01 = [timehoursnp, nummer * np.ones(len(timehoursnp)), np.zeros(len(timehoursnp))]
        set1 = [timehoursnp, nummer * np.ones(len(timehoursnp)), peaknp]
        ax.plot(*set1, lw=2, zorder=zord, c="C%s"%zstr, label='%s' % name)
        fill_between_3d(ax, *set01, *set1, mode=1, c="C%s"%zstr)
        ax.set_zlim((0, np.max([peaknp])))
        labels = list(range(12, 32))
        plt.xticks(np.arange(0, len(timehours), step=24), labels)  # ,range(19,30))
        plt.xlabel('Day in July')
        #zord=zord-5
        #plt.show()
    plt.legend(bbox_to_anchor=(1,1), loc="upper left")
    plt.show()

#PlotEvolvementh3d(['Bullingen','Wirtzfeld','Malmedyenne','Beverce','Malmedy','Lasnenville','TroisPonts','Stavelot','Chevron','Targnon','Remouchamps','Martinrive'])
#PlotEvolvementh3d(['Lasnenville','Stavelot','Targnon','Remouchamps','Martinrive'])
#PlotEvolvementh3d((['Bullingen','Wirtzfeld','Beverce','Malmedyenne','Malmedy']))
#PlotEvolvementh3d((['Bullingen','Wirtzfeld','Beverce','Malmedy']))
#PlotEvolvementh3d(['Lasnenville','TroisPonts','Stavelot']) #Salm
#PlotEvolvementh3d(['Chevron','Stavelot','Targnon']) #La lienne
#PlotEvolvementh3d(['Targnon', 'Remouchamps','Martinrive']) #end

def PlotEvolvementq3d(names,case):
    fig=plt.figure(figsize=(12,8))
    ax = fig.add_subplot(111, projection='3d', xlim=(0, 456), ylim=(0, 10))
    nummer=0
    zord=20
    for i in range(len(names)):
        name= names[i]
        z=i
        zstr=str(z)
        zord=zord-5
        nummer=nummer+1
        if case=='new' and name=='Martinrive' or name=='Remouchamps' or name=='Targnon' or name=='TroisPonts' or name=='Beverce' or name=='Stavelot':
            peak=Remove_baseflow(name, 'q', 'new')
        else:
            peak=Remove_baseflow(name, 'q', 'old')
        peaknp=np.array(peak)
        timehours = list(range(len(peak)))
        timehoursnp=np.array(timehours)
        #plt.plot(timehoursnp, znp, peaknp, label='%s' % name)
        set01 = [timehoursnp, nummer * np.ones(len(timehoursnp)), np.zeros(len(timehoursnp))]
        set1 = [timehoursnp, nummer * np.ones(len(timehoursnp)), peaknp]
        ax.plot(*set1, lw=2, zorder=zord, c="C%s"%zstr, label='%s' % name)
        fill_between_3d(ax, *set01, *set1, mode=1, c="C%s"%zstr)
        ax.set_zlim((0, np.max([peaknp])))
        labels = list(range(12, 32))
        plt.xticks(np.arange(0, len(timehours), step=24), labels)  # ,range(19,30))
        plt.xlabel('Day in July')
        #zord=zord-5
        #plt.show()
    plt.legend(bbox_to_anchor=(1,1), loc="upper left")
    #plt.zlabel()
    plt.show()

#PlotEvolvementq3d(['Lasnenville','Stavelot','Targnon','Martinrive'], 'old')

def plotQ(names,case):
    for i in range(len(names)):
        name = names[i]
        z = i
        zstr = str(z)
        if case == 'new' and name == 'Martinrive' or name == 'Remouchamps' or name == 'Targnon' or name == 'TroisPonts' or name == 'Beverce' or name == 'Stavelot':
            peak = Remove_baseflow(name, 'q', 'new')
        else:
            peak = Remove_baseflow(name, 'q', 'old')
        plt.plot(peak)
    plt.show()
